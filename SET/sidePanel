import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;

public class sidePanel extends JPanel implements ActionListener {
	
	private JLabel hold;
	public static JPanel holdDisplay;
	private JPanel[][] holdTiles;
	public static JLabel scoreLabel;
	private JButton menu;
	private JButton pause;
	private int HDrows = 4;
	private int HDcols = 6;

	public sidePanel()
	{
		hold = new JLabel("HOLD (shift)");
		holdDisplay = new JPanel();
		holdTiles = new JPanel[HDrows][HDcols];
		scoreLabel = new JLabel("SCORE: 0");
		menu = new JButton("MENU (m)");
		pause = new JButton("PAUSE (p)");
		menu.addActionListener(this);
		pause.addActionListener(this);
		menu.setFocusable(false);
		pause.setFocusable(false);
		initializeSideDim(20);
		
	}
	
	public void initializeSideDim(int strut)
	{
		this.setPreferredSize(new Dimension(100, 400));
		this.setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));
		this.setOpaque(true);
		this.add(Box.createVerticalStrut(strut));
		this.add(hold);
		holdDisplayGrid(20, 0, Color.BLACK);
		this.add(holdDisplay);
		this.add(Box.createVerticalStrut(strut));
		this.add(scoreLabel);
		this.add(Box.createVerticalStrut(strut));
		this.add(menu);
		this.add(Box.createVerticalStrut(strut));
		this.add(pause);
		this.add(Box.createVerticalStrut(strut));
	}
	
	public void holdDisplayGrid(int gridBorderW, int gridBorderL, Color bg)
	{
		
		holdDisplay.setPreferredSize(new Dimension (50, 75));
		holdDisplay.setMinimumSize(new Dimension(50, 75));
		holdDisplay.setMaximumSize(new Dimension(50, 75));
		GridLayout grid = new GridLayout(HDrows, HDcols, gridBorderW, gridBorderL);
		holdDisplay.setLayout(grid);
		for (int i = 0; i < HDrows; i++)
		{
			for (int j = 0; j < HDcols; j++)
			{
				holdTiles[i][j] = new JPanel();
				holdTiles[i][j].setBackground(bg);
				holdTiles[i][j].setOpaque(true);
				holdDisplay.add(holdTiles[i][j]);
			}
		}
		paintCell(0,0, Color.WHITE);
		holdDisplay.setBackground(Color.BLACK);
		holdDisplay.setOpaque(true);
	}
	
	public void paintHoldPiece()
	{
		for (int r = 0; r < mainPanel.holdPiece.length; r++)
		{
			for (int c = 0; c < mainPanel.holdPiece[0].length; c++)
			{
				if (mainPanel.holdPiece[r][c])
				{
					//paint piece starting at (1, 1)
					paintCell(r, c, mainPanel.holdPieceColor); 
			
				}
			}
		}
	}
	
	public void paintCell(int row, int col, Color c)
	{
		holdTiles[row][col].setBackground(c);
	}
	
	@Override
	public void actionPerformed(ActionEvent e) {
		if(e.getActionCommand().equals("MENU (m)"))
		{
			System.out.println("open menu window");
		}
		if(e.getActionCommand().equals("PAUSE (p)"))
		{
			Tetris.main.pauseGame();
			//System.out.println("paused");
		}
	}

}
